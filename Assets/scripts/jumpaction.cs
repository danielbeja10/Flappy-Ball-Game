//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/scripts/jumpaction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Jumpaction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Jumpaction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""jumpaction"",
    ""maps"": [
        {
            ""name"": ""touch"",
            ""id"": ""342dad5a-1a1c-437c-8232-e259ad4001e5"",
            ""actions"": [
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""1985c99e-f7f0-417d-a01a-00693053384b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""button"",
                    ""type"": ""Button"",
                    ""id"": ""a4af32eb-37c2-463a-afa1-79ff0436b0e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e15ce770-d98e-4dfd-90f3-0ab7dd3a5e79"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfa97bca-afdd-4c3e-b25b-8c529b59f3b7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""007c4616-b20b-45e1-9da5-83cbf7dcd0e0"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // touch
        m_touch = asset.FindActionMap("touch", throwIfNotFound: true);
        m_touch_jump = m_touch.FindAction("jump", throwIfNotFound: true);
        m_touch_button = m_touch.FindAction("button", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // touch
    private readonly InputActionMap m_touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_touch_jump;
    private readonly InputAction m_touch_button;
    public struct TouchActions
    {
        private @Jumpaction m_Wrapper;
        public TouchActions(@Jumpaction wrapper) { m_Wrapper = wrapper; }
        public InputAction @jump => m_Wrapper.m_touch_jump;
        public InputAction @button => m_Wrapper.m_touch_button;
        public InputActionMap Get() { return m_Wrapper.m_touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @jump.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnJump;
                @button.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnButton;
                @button.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnButton;
                @button.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnButton;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @button.started += instance.OnButton;
                @button.performed += instance.OnButton;
                @button.canceled += instance.OnButton;
            }
        }
    }
    public TouchActions @touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnButton(InputAction.CallbackContext context);
    }
}
